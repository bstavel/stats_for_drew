library(tidyverse)
library(Rcpp)
library(ggplot2)
library(microbenchmark)
library(tidyverse)
library(Rcpp)
library(ggplot2)
library(microbenchmark)
# lingData <- load('./data/lingBinary.RData')
load('./quickStart.RData')
sourceCpp('similarity.cpp')
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
C1s + C2s
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
similarityRcpp(C1, C2)
C1s <- C1[1:1000, 1:1000]
C2s <- C2[1:1000, 1:1000]
similarityRcpp(C1s, C2s)
JaccardSim <- function(matOne, matTwo){
### This function computes the Jaccard coefficient between two clustering solutions, as defined in Ben-Hur et al. [2001] ###
## if both matrices have Cij == 1, then [C1 + C2]ij == 2
N11_mat <- matOne + matTwo %>%
apply(., 2, function(x) x == 2)
## if either matrices have Cij == 1, then [C1 + C2]ij == 1
N10_mat <- matOne + matTwo %>%
apply(., 2, function(x) x == 1)
similarity <- sum(N11_mat) / ( sum(N10_mat) + sum(N10_mat) )
return(similarity)
}
adjMat <- function(vec, n){
### takes a group vector and converts to an adjacency matrix ###
for(c in 1:n){
## create 0 matrix with dimensions n X n
C <- matrix(0, nrow = length(vec), ncol = length(vec))
## get indices of individuals in group c
indx  = which(vec == c)
## set all pairs to 1
C[indx, indx] <- 1
## return vector
return(C)
}
}
JaccardSim(C1s, C2s)
jaccardSim <- function(matOne, matTwo){
### This function computes the Jaccard coefficient between two clustering solutions, as defined in Ben-Hur et al. [2001] ###
## if both matrices have Cij == 1, then [C1 + C2]ij == 2
N11_mat <- matOne + matTwo %>%
apply(., 2, function(x) x == 2)
## if either matrices have Cij == 1, then [C1 + C2]ij == 1
N10_mat <- matOne + matTwo %>%
apply(., 2, function(x) x == 1)
similarity <- sum(N11_mat) # / ( sum(N10_mat) + sum(N10_mat) )
return(similarity)
}
jaccardSim(C1s, C2s)
sourceCpp('similarity.cpp')
jaccardSim(C1s, C2s)
similarityRcpp(C1s, C2s)
similarityRcpp(C1s, C2s)
C1s + C2s
C1s + C2s == 2
table(C1s + C2s == 2)
sum(C1s + C2s == 2)
jaccardSim <- function(C1, C2){
### This function computes the Jaccard coefficient between two clustering solutions, as defined in Ben-Hur et al. [2001] ###
## if both matrices have Cij == 1, then [C1 + C2]ij == 2
N11 <- sum(C1s + C2s == 2)
## if either matrices have Cij == 1, then [C1 + C2]ij == 1
N10 <- sum(C1s + C2s == 1)
similarity <- N11  / ( 2*N10 )
return(similarity)
}
jaccardSim(C1s, C2s)
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
jaccardSim(C1s, C2s)
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
2 *76370
1849 /152740
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
152740 /2
sourceCpp('similarity.cpp')
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
similarityRcpp(C1s, C2s)
similarityRcpp(C1, C2)
jaccardSim(C1s, C2s)
1849 / 152740
sourceCpp('similarity.cpp')
similarityRcpp(C1, C2)
similarityRcpp(C1s, C2s)
sourceCpp('similarity.cpp')
ptmRcpp <- proc.time()
similarityRcpp(C1, C2)
finishRcpp <- proc.time() - ptmRcpp
ptmR <- proc.time()
jaccardSim(C1s, C2s)
finishR <-   proc.time() - ptmR
finishR
finishRcpp
sourceCpp('similarity.cpp')
sourceCpp('similarity.cpp')
similarityRcpp(C1, C2)
ptmRcpp <- proc.time()
similarityRcpp(C1, C2)
finishRcpp <- proc.time() - ptmRcpp
ptmR <- proc.time()
jaccardSim(C1s, C2s)
finishR <-   proc.time() - ptmR
ptmRcpp <- proc.time()
similarityRcpp(C1, C2)
finishRcpp <- proc.time() - ptmRcpp
ptmR <- proc.time()
jaccardSim(C1, C2)
finishR <-   proc.time() - ptmR
finishR
finishRcpp
ptmRcpp <- proc.time()
similarityRcpp(C1, C2)
finishRcpp <- proc.time() - ptmRcpp
ptmR <- proc.time()
jaccardSim(C1, C2)
finishR <-  proc.time() - ptmR
jaccardSim <- function(C1, C2){
### This function computes the Jaccard coefficient between two clustering solutions, as defined in Ben-Hur et al. [2001] ###
## if both matrices have Cij == 1, then [C1 + C2]ij == 2
N11 <- sum(C1 + C2 == 2)
## if either matrices have Cij == 1, then [C1 + C2]ij == 1
N10 <- sum(C1 + C2 == 1)
similarity <- N11  / ( 2*N10 )
return(similarity)
}
adjMat <- function(vec, n){
### takes a group vector and converts to an adjacency matrix ###
for(c in 1:n){
## create 0 matrix with dimensions n X n
C <- matrix(0, nrow = length(vec), ncol = length(vec))
## get indices of individuals in group c
indx  = which(vec == c)
## set all pairs to 1
C[indx, indx] <- 1
## return vector
return(C)
}
}
ptmRcpp <- proc.time()
similarityRcpp(C1, C2)
finishRcpp <- proc.time() - ptmRcpp
ptmR <- proc.time()
jaccardSim(C1, C2)
finishR <-  proc.time() - ptmR
finishR
finishRcpp
